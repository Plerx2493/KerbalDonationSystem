@page "/Channel"
@using Microsoft.AspNetCore.Authorization
@using KDS.Components.Account
@using KDS.Components.Donations.Components
@using KDS.Data
@using KDS.Services

@inject NavigationManager NavigationManager
@inject IdentityUserAccessor UserAccessor
@inject TwitchAuthService TwitchAuthService

@attribute [Authorize]

<h3>Channel</h3>

@if(!Auth?.IsElevated ?? true){
    <TwitchElevationForm/>
}

<MudGrid Spacing="3" Justify="Justify.Center">
    <MudItem>
        <MudCard Style="background-color: #1e1c1c;" Elevation="5" Class="pa-4 rounded">
            <MudCardContent Style=" color: #7a7a7a">
                <MudPaper/>
                <MudText>Story of the day</MudText>
                <MudText Typo="Typo.body2">The quick, brown fox jumps over a lazy dog.</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Text" Style="color: #365d39">Learn More</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem>
        <MudCard Style="background-color: #1e1c1c">
            <h1 >Card 2</h1>
        </MudCard>
    </MudItem>
    <MudItem>
        <MudCard Style="background-color: #1e1c1c">
            <h1>Card 3</h1>
        </MudCard>
    </MudItem>
</MudGrid>


@code {
    private ApplicationUser? user;
    private TwitchAuth? Auth;

    
    
    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }
    
    protected override async void OnParametersSet()
    {
        if (HttpContext is null)
        {
            // If this code runs, we're currently rendering in interactive mode, so there is no HttpContext.
            // The identity pages need to set cookies, so they require an HttpContext. To achieve this we
            // must transition back from interactive mode to a server-rendered page.
            NavigationManager.Refresh(true);
            return;
        }
        
        user = await UserAccessor.GetRequiredUserAsync(HttpContext) ?? throw new Exception("User not found");
        Auth = await TwitchAuthService.GetAuth(user.TwitchId) ?? throw new Exception("No Auth found");
        
        

    }
    
    
    
    /*
       Schrift:
       7a7a7a
       Hintergrund:
       424040
       Karten:
       1e1c1c
       Akzent:
       365d39
     */
}
