@page "/Channel"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using KDS.Components.Donations.Components
@using KDS.Data
@using KDS.Services
@using Microsoft.AspNetCore.Identity

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> ApplicationUserManager
@inject TwitchAuthService TwitchAuth
@inject ChannelManagerService ChannelManager

@attribute [Authorize]

<h3>Channel</h3>

@if(!Auth?.IsElevated ?? true){
    <TwitchElevationForm/>
}

<MudGrid Spacing="3" Justify="Justify.Center">
    @if (ChannelPointRewards is not null)
    {
        @foreach (var donation in ChannelPointRewards)
        {
            <RewardConfigCard RewardId="@donation.Id" IsNew="false"/>
        }
    }
    <RewardConfigCard RewardId="@null" IsNew="true"/>
</MudGrid>


@code {
    private ApplicationUser? user;
    private TwitchAuth? Auth;
    private IEnumerable<ChannelPointReward>? ChannelPointRewards;
    
    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }
    
    protected override async void OnParametersSet()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = await ApplicationUserManager.GetUserAsync(state.User) ?? throw new Exception("No User found");
        Auth = await TwitchAuth.GetAuth(user.TwitchId) ?? throw new Exception("No Auth found");
        ChannelPointRewards = await ChannelManager.GetChannelPointRewardsAsync(Auth.ChannelId);
        
        StateHasChanged();
    }
    
    
    
    /*
       Schrift:
       7a7a7a
       Hintergrund:
       424040
       Karten:
       1e1c1c
       Akzent:
       365d39
     */
}
